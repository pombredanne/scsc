#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import pyotp
import urllib
import socket
import getpass

file_path = "/opt/definitely-not-a-secret"
prog_name = sys.argv[0]

def verify(secret):
    input_code = os.getenv("TOTP_CODE", getpass.getpass("TOTP code: "))
    try:
        code = int(input_code)
    except:
        die("Can't parse the code.")
    totp = pyotp.TOTP(secret)
    return totp.verify(code)

def verify_from_file():
    try:
        with open(file_path) as f:
            txt = f.read()
        return verify(txt)
    except IOError:
        print("Warning: no TOTP secret found at " + file_path)
        print("Run 'sudo %s init' to initialize two-factor authentication." % prog_name)
        return True

def die(msg):
    sys.stderr.write(msg)
    sys.exit(1)

def print_help_and_die():
    print("Usage: %s command args" % prog_name)
    print("  Commands:")
    print("    init - generate a secret, validate auth")
    print("    verify - verify auth")
    print("    ssh-verify - verify auth and execute the SSH command (used from SSH)")
    sys.exit()

if len(sys.argv) == 1:
    print_help_and_die()

cmd = sys.argv[1]

if cmd == "init":
    secret = pyotp.random_base32()
    totp = pyotp.TOTP(secret)
    uri = totp.provisioning_uri(socket.gethostname())
    print("Your provisioning URI: " + uri)
    print("QR code URI: " + \
            "https://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl=" + \
            urllib.quote(uri))
    print("""(if you don't want Google's QR code generator to 
log your secret, do not use the QR code or make it yourself)""")
    print("")
    print("After you've added the secret to your app, make sure it works.")
    getpass.getpass("Press Enter when you're ready to enter a code:")
    if verify(secret):
        with open(file_path, "w") as f:
            f.write(secret)
        print("Success!")
    else:
        print("Nope, that is not correct. Try again.")
elif cmd == "verify":
    if verify_from_file():
        print("The code is valid :-)")
    else:
        print("The code is not valid :-(")
elif cmd == "ssh-verify":
    if verify_from_file():
        motd_sh_path = "/usr/bin/motd+shell"
        if os.path.exists(motd_sh_path):
            fallback = motd_sh_path
        else:
            fallback = os.getenv("SHELL", "/bin/bash")
        cmd = os.getenv("SSH_ORIGINAL_COMMAND", fallback)
        os.system(cmd)
    else:
        die("Invalid TOTP code :-(")
else:
    print_help_and_die()
